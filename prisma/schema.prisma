// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model order {
  id                     Int              @id @default(autoincrement())
  locale                 String           @default("en-US")
  status                 orderStatus      @default(ORDERED)
  order                  String
  guildId                String
  guildName              String? // was not stored in earlier versions
  customerId             String
  customerUsername       String
  channelId              String
  statusMessageId        String
  chefId                 String?
  chefUsername           String?
  deliveryId             String?
  deliveryUsername       String?
  fileUrl                String?
  rejectedReason         String?
  rejectorId             String?
  relatedKitchenMessages String[] // `enum:messageID` format
  invite                 String?
  trainingSession        trainingSession?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status, guildId, customerId])
}

enum orderStatus {
  ORDERED
  FILLING
  PACKING
  PACKED
  DELIVERING
  DELIVERED
  REJECTED
}

model chef {
  id        String  @id
  message   String
  backticks Boolean @default(false)
}

model KitchenConfig {
  id           Int     @id
  closed       Boolean @default(false)
  closedReason String  @default("")
}

model application {
  id     Int               @id @default(autoincrement())
  user   String
  token  String            @unique @default(uuid())
  status applicationStatus @default(DRAFT)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

enum applicationStatus {
  DRAFT
  PENDING
  REJECTED
  APPROVED //awaiting training
  TRAINING //added to training channel, or done with training
  STALE //ones from the old system that should be ignored
}

model trainingSession {
  id       Int    @id @default(autoincrement())
  user     String
  threadId String @unique
  state    String @default("welcome")
  order    order? @relation(fields: [orderId], references: [id])
  orderId  Int?   @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ban {
  id       Int       @id @default(autoincrement())
  user     String
  reason   String
  message  String
  endAt    DateTime
  appealAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
